require "spec"
require "../src/*"

<%- 
    tests_with_nested = ["d6ecd72c-197f-40c3-89a4-aa1f45827e09", "40872990-b5b8-4cb8-9085-d91fc0d05d26"]

    emptiable = ->(input : JSON::Any) { 
        if input.as_a.empty?
            "[] of Int32"
        else
            input.to_s
        end
    }

    nestable_emptiable = ->(input : JSON::Any) {
        if input.as_a.empty?
            "[] of Array(Int32)"
        else
            input.to_s.gsub("[]", "[] of Int32")
        end
    }
-%>
describe "<%-= to_capitalized(@json["exercise"].to_s) %>" do
    <%- @json["cases"].as_a.each do |describe| -%>
        describe "<%= describe["description"].to_s %>" do
            <%- describe["cases"].as_a.each do |cases| -%>
                <%= status() %> "<%= cases["description"] %>" do
                    <%- if tests_with_nested.any?(cases["uuid"]) -%>
                        list_ops = ListOps(Array(Int32)).new()
                    <%- else -%>
                        list_ops = ListOps(Int32).new()
                    <%- end -%>
                    <%- if cases["property"].to_s == "append" -%>
                        list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list1"]) %>, <%= emptiable.call(cases["input"]["list2"]) %>).should eq(<%= emptiable.call(cases["expected"]) %>)
                    <%- end -%>
                    <%- if cases["property"].to_s == "concat" -%>
                        list_ops.<%= cases["property"] %>(<%= nestable_emptiable.call(cases["input"]["lists"]) %>).should eq(<%= 
                            if tests_with_nested.any?(cases["uuid"]) 
                                nestable_emptiable.call(cases["expected"])
                            else
                                emptiable.call(cases["expected"]) 
                            end%>)
                    <%- end -%>
                    <%- if cases["property"].to_s == "filter" -%>
                        filter = <%= function(cases["input"]["function"], ["Int32"]) %>
                        list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list"]) %>, filter).should eq(<%= emptiable.call(cases["expected"]) %>)
                    <%- end -%>
                    <%- if cases["property"].to_s == "length" -%>
                        list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list"]) %>).should eq(<%= cases["expected"] %>)
                    <%- end -%>
                    <%- if cases["property"].to_s == "map" -%>
                        mapper = <%= function(cases["input"]["function"], ["Int32"]) %>
                        list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list"]) %>, mapper).should eq(<%= emptiable.call(cases["expected"]) %>)
                    <%- end -%>
                    <%- if ["foldl", "foldr"].any?(cases["property"]) -%>
                        <%- if cases["input"]["function"].to_s.matches?(/.*->.*\/.*/) -%>
                            folder = <%= function(cases["input"]["function"], ["Float64", "Int32"]) %>
                            list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list"]) %>, <%= cases["input"]["initial"] %>.to_f64, folder).should eq(<%= cases["expected"] %>.to_f64)                    
                        <%- else -%>
                            folder = <%= function(cases["input"]["function"], ["Int32", "Int32"]) %>
                            list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list"]) %>, <%= cases["input"]["initial"] %>, folder).should eq(<%= cases["expected"] %>)
                        <%- end -%>
                    <%- end -%>
                    <%- if cases["property"].to_s == "reverse" -%>
                        <%- if tests_with_nested.any?(cases["uuid"]) -%>
                            list_ops.<%= cases["property"] %>(<%= nestable_emptiable.call(cases["input"]["list"]) %>).should eq(<%= nestable_emptiable.call(cases["expected"]) %>)
                        <%- else -%>
                            list_ops.<%= cases["property"] %>(<%= emptiable.call(cases["input"]["list"]) %>).should eq(<%= emptiable.call(cases["expected"]) %>)
                        <%- end -%>
                    <%- end -%>
                end
            <%- end -%>
        end
    <%- end -%>
end
